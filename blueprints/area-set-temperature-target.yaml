blueprint:
  name: AREA set temperature target
  description: Set target temperature based on the activity state of an area.
  domain: automation
  source_url: https://github.com/konstar/hass/blob/main/blueprints/area-set-temperature-target.yaml
  input:
    activity:
      name: Activity helper
      description: Helper that records the activity that is happening in the room.
      selector:
        entity:
          domain: input_select
    target_temp:
      name: Target temperature helper
      description: Helper that records the target temperature to reach.
      selector:
        entity:
          domain: input_number
    active_temp:
      name: Active temperature helper
      description: Helper which manages the temperature of the room when active.
      selector:
        entity:
          domain: input_number
    change_temp:
      name: Change temperature helper
      description: Helper which manages the temperature of the room when changing.
      selector:
        entity:
          domain: input_number
    relax_temp:
      name: Relax temperature helper
      description: Helper which manages the temperature of the room when relaxing.
      selector:
        entity:
          domain: input_number
    sleep_temp:
      name: Sleep temperature helper
      description: Helper which manages the temperature of the room when sleeping.
      selector:
        entity:
          domain: input_number
    active_states:
      name: Active states
      description: List of states which you would class as "active". E.g. 'work','play'
      selector:
        text:
    change_states:
      name: Change states
      description: List of states which you would class as "changing". E.g. 'change'
      selector:
        text:
    relax_states:
      name: Relax states
      description: List of states which you would class as "relaxed". E.g. 'meditate','music','tv'
      selector:
        text:
    sleep_states:
      name: Sleep states
      description: list of activity states which you would class as "sleeping". E.g. 'sleep'
      selector:
        text:
variables:
  activity: !input "activity"
  target_temp: !input "target_temp"
  active_temp: !input "active_temp"
  change_temp: !input "change_temp"
  relax_temp: !input "relax_temp"
  sleep_temp: !input "sleep_temp"
  active_states: !input "active_states"
  change_states: !input "change_states"
  relax_states: !input "relax_states"
  sleep_states: !input "sleep_states"
trigger:
  - id: activity
    platform: state
    entity_id: !input activity
  - id: active_temp
    platform: state
    entity_id: !input active_temp
  - id: change_temp
    platform: state
    entity_id: !input change_temp
  - id: relax_temp
    platform: state
    entity_id: !input relax_temp
  - id: sleep_temp
    platform: state
    entity_id: !input sleep_temp
condition: []
action:
  - choose:
      - conditions:
          - alias: "Active"
            condition: template
            value_template: "{{ states(activity) in (active_states) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input "target_temp"
            data:
              value: "{{ states(active_temp)|float }}"
      - conditions:
          - alias: "Change"
            condition: template
            value_template: "{{ states(activity) in (change_states) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input "target_temp"
            data:
              value: "{{ states(change_temp)|float }}"
      - conditions:
          - alias: "Relax"
            condition: template
            value_template: "{{ states(activity) in (relax_states) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input "target_temp"
            data:
              value: "{{ states(relax_temp)|float }}"
      - conditions:
          - alias: "Sleep"
            condition: template
            value_template: "{{ states(activity) in (sleep_states) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input "target_temp"
            data:
              value: "{{ states(sleep_temp)|float }}"
mode: single
max_exceeded: silent
