blueprint:
  name: AREA set temperature v2
  description: Set temperature selection for the state of an area.
  domain: automation
  source_url: https://github.com/konstar/hass/blob/main/blueprints/area-set-temperature-v2.yaml
  input:
    output:
      name: Temperature helper
      description: Helper that stores whether room is hot or cold, etc.
      selector:
        entity:
          domain: input_select
    sensor:
      name: Temperature sensor
      description: Temperature sensor of the area.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    target_low:
      name: Low target temperature
      description: Low target temperature of the area.
      selector:
        entity:
          domain: input_number
    target_high:
      name: High target temperature
      description: High target temperature of the area.
      selector:
        entity:
          domain: input_number
variables:
  output: !input "output"
  sensor: !input "sensor"
  target_low: !input "target_low"
  target_high: !input "target_high"
trigger:
  - id: sensor
    platform: state
    entity_id: !input sensor
  - id: target
    platform: state
    entity_id: !input target_low
  - id: target
    platform: state
    entity_id: !input target_high
  - id: unknown_1
    platform: numeric_state
    entity_id: !input sensor
    below: 2
  - id: unknown_2
    platform: numeric_state
    entity_id: !input sensor
    above: 50
condition: []
action:
  - choose:
      - conditions:
          - "{{ ( states(sensor)|float > states(target_low)|float )  and  ( states(sensor)|float < states(target_high)|float ) }}"
        sequence:
            - service: input_select.select_option
              target:
                entity_id: !input "output"
              data:
                option: normal
      - conditions:
          - "{{ ( states(sensor)|float > (states(target_high)|float )  and  ( states(sensor)|float < (states(target_high)|float + 2) ) }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input "output"
            data:
              option: hot
      - conditions:
          - "{{ ( states(sensor)|float < states(target_low)|float )  and  ( states(sensor)|float > (states(target_low)|float - 2) ) }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input "output"
            data:
              option: cold
      - conditions:
          - "{{ states(sensor)|float > (states(target_high)|float + 2) }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input "output"
            data:
              option: very-hot
      - conditions:
          - "{{ states(sensor)|float < (states(target_low)|float - 2) }}"
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input "output"
            data:
              option: very-cold
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: unknown_1
              - condition: trigger
                id: unknown_2
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input "output"
            data:
              option: unknown
mode: restart
